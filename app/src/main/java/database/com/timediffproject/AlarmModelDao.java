package database.com.timediffproject;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.timediffproject.database.AlarmModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_MODEL".
*/
public class AlarmModelDao extends AbstractDao<AlarmModel, Long> {

    public static final String TABLENAME = "ALARM_MODEL";

    /**
     * Properties of entity AlarmModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RequestCode = new Property(0, Long.class, "requestCode", true, "_id");
        public final static Property SettingTime = new Property(1, Long.class, "settingTime", false, "SETTING_TIME");
        public final static Property CityId = new Property(2, Long.class, "cityId", false, "CITY_ID");
        public final static Property City = new Property(3, String.class, "city", false, "CITY");
        public final static Property AlarmTime = new Property(4, Long.class, "alarmTime", false, "ALARM_TIME");
        public final static Property IsRepeatAlarm = new Property(5, Boolean.class, "isRepeatAlarm", false, "IS_REPEAT_ALARM");
        public final static Property RepeatDaysStr = new Property(6, String.class, "repeatDaysStr", false, "REPEAT_DAYS_STR");
        public final static Property RepeatIndex = new Property(7, Integer.class, "repeatIndex", false, "REPEAT_INDEX");
        public final static Property IsUsing = new Property(8, Boolean.class, "isUsing", false, "IS_USING");
        public final static Property NoiseLevel = new Property(9, Float.class, "noiseLevel", false, "NOISE_LEVEL");
    }


    public AlarmModelDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: requestCode
                "\"SETTING_TIME\" INTEGER," + // 1: settingTime
                "\"CITY_ID\" INTEGER," + // 2: cityId
                "\"CITY\" TEXT," + // 3: city
                "\"ALARM_TIME\" INTEGER," + // 4: alarmTime
                "\"IS_REPEAT_ALARM\" INTEGER," + // 5: isRepeatAlarm
                "\"REPEAT_DAYS_STR\" TEXT," + // 6: repeatDaysStr
                "\"REPEAT_INDEX\" INTEGER," + // 7: repeatIndex
                "\"IS_USING\" INTEGER," + // 8: isUsing
                "\"NOISE_LEVEL\" REAL);"); // 9: noiseLevel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlarmModel entity) {
        stmt.clearBindings();
 
        Long requestCode = entity.getRequestCode();
        if (requestCode != null) {
            stmt.bindLong(1, requestCode);
        }
 
        Long settingTime = entity.getSettingTime();
        if (settingTime != null) {
            stmt.bindLong(2, settingTime);
        }
 
        Long cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindLong(3, cityId);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        Long alarmTime = entity.getAlarmTime();
        if (alarmTime != null) {
            stmt.bindLong(5, alarmTime);
        }
 
        Boolean isRepeatAlarm = entity.getIsRepeatAlarm();
        if (isRepeatAlarm != null) {
            stmt.bindLong(6, isRepeatAlarm ? 1L: 0L);
        }
 
        String repeatDaysStr = entity.getRepeatDaysStr();
        if (repeatDaysStr != null) {
            stmt.bindString(7, repeatDaysStr);
        }
 
        Integer repeatIndex = entity.getRepeatIndex();
        if (repeatIndex != null) {
            stmt.bindLong(8, repeatIndex);
        }
 
        Boolean isUsing = entity.getIsUsing();
        if (isUsing != null) {
            stmt.bindLong(9, isUsing ? 1L: 0L);
        }
 
        Float noiseLevel = entity.getNoiseLevel();
        if (noiseLevel != null) {
            stmt.bindDouble(10, noiseLevel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlarmModel entity) {
        stmt.clearBindings();
 
        Long requestCode = entity.getRequestCode();
        if (requestCode != null) {
            stmt.bindLong(1, requestCode);
        }
 
        Long settingTime = entity.getSettingTime();
        if (settingTime != null) {
            stmt.bindLong(2, settingTime);
        }
 
        Long cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindLong(3, cityId);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        Long alarmTime = entity.getAlarmTime();
        if (alarmTime != null) {
            stmt.bindLong(5, alarmTime);
        }
 
        Boolean isRepeatAlarm = entity.getIsRepeatAlarm();
        if (isRepeatAlarm != null) {
            stmt.bindLong(6, isRepeatAlarm ? 1L: 0L);
        }
 
        String repeatDaysStr = entity.getRepeatDaysStr();
        if (repeatDaysStr != null) {
            stmt.bindString(7, repeatDaysStr);
        }
 
        Integer repeatIndex = entity.getRepeatIndex();
        if (repeatIndex != null) {
            stmt.bindLong(8, repeatIndex);
        }
 
        Boolean isUsing = entity.getIsUsing();
        if (isUsing != null) {
            stmt.bindLong(9, isUsing ? 1L: 0L);
        }
 
        Float noiseLevel = entity.getNoiseLevel();
        if (noiseLevel != null) {
            stmt.bindDouble(10, noiseLevel);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AlarmModel readEntity(Cursor cursor, int offset) {
        AlarmModel entity = new AlarmModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // requestCode
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // settingTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // cityId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // alarmTime
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isRepeatAlarm
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // repeatDaysStr
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // repeatIndex
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isUsing
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9) // noiseLevel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlarmModel entity, int offset) {
        entity.setRequestCode(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSettingTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCityId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlarmTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIsRepeatAlarm(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setRepeatDaysStr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRepeatIndex(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsUsing(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setNoiseLevel(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlarmModel entity, long rowId) {
        entity.setRequestCode(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlarmModel entity) {
        if(entity != null) {
            return entity.getRequestCode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlarmModel entity) {
        return entity.getRequestCode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
